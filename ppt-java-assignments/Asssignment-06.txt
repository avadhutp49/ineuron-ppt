================================
Q1. What is Collection in Java?
--------------------------------
In Java, the Collection is a powerful framework that provides a comprehensive set of interfaces, classes, and algorithms to handle groups of objects. It serves as a foundation for storing, manipulating, and retrieving elements efficiently. The Collection framework, nestled within the java.util package, offers a unified and standardized approach to working with collections. It allows developers to use predefined interfaces and classes to simplify their code and increase productivity. Collections can hold various types of objects, such as integers, strings, or custom objects, enabling developers to build versatile applications. Overall, the Collection framework empowers Java developers to manage and process collections effortlessly.

============================================================================
Q2. Differentiate between Collection and collections in the context of Java.
----------------------------------------------------------------------------
In Java, "Collection" and "collections" have distinct meanings and purposes. "Collection" refers to an interface defined in the Java Collections Framework. It serves as the root interface in the collection hierarchy, establishing the fundamental behaviors and operations that all collection classes should support. It provides methods for adding, removing, and accessing elements, making it a versatile foundation for different collection types.

"collections" refers to the variety of classes and implementations available in the Java Collections Framework. These classes, such as ArrayList, LinkedList, HashSet, and TreeSet, are concrete implementations of the Collection interface. They provide specific functionalities and behavior tailored for different collection types, such as lists, sets, queues, and maps. Collections enable developers to choose the most appropriate implementation based on their requirements.

========================================================
Q3. What are the advantages of the Collection framework?
--------------------------------------------------------
The Collection framework in Java offers several advantages that make it an indispensable tool for Java developers. Firstly, it provides reusable and efficient data structures and algorithms. Developers can leverage these pre-implemented collections to handle groups of objects without reinventing the wheel, saving time and effort. The framework promotes code reusability, leading to cleaner, more maintainable codebases.

The Collection framework ensures interoperability between different collection types. By adhering to common interfaces, collections can be seamlessly interchanged, facilitating code flexibility and enhancing modularity. Developers can write generic code that works with multiple collection implementations, allowing them to adapt their code to changing requirements easily.

The Collection framework standardizes the handling of collections in Java. Its consistent set of interfaces, classes, and methods makes it easier for developers to understand, learn, and utilize the various collection classes available. This standardization promotes code consistency and improves code readability, making it easier for developers to collaborate and maintain each other's code.

The Collection framework emphasizes performance optimization. Its implementations are designed to provide efficient access, insertion, deletion, and search operations. This ensures that collections can handle large amounts of data efficiently, improving the overall performance of Java applications.

====================================================================
Q4. Explain the various interfaces used in the Collection framework.
--------------------------------------------------------------------
The Collection framework in Java incorporates several essential interfaces that define behaviors and operations for different types of collections.

Collection: The Collection interface serves as the root of the collection hierarchy. It defines the core functionality that all collection classes should implement. It includes methods for adding, removing, and accessing elements within a collection. Examples of classes implementing this interface are ArrayList, LinkedList, and HashSet.

List: The List interface extends the Collection interface and represents an ordered collection that allows duplicate elements. It introduces additional operations for positional access and manipulation of elements. Implementations of List, such as ArrayList and LinkedList, enable developers to work with an index-based structure, making it easy to retrieve, add, or remove elements at specific positions.

Set: The Set interface extends the Collection interface and represents a collection that does not allow duplicate elements. It ensures that each element in the set is unique. Set implementations, like HashSet and TreeSet, provide methods for membership testing, adding, and removing elements.

Queue: The Queue interface extends the Collection interface and represents a collection designed for holding elements prior to processing. It follows the FIFO (First-In-First-Out) order, meaning that elements are processed in the same order as they are added. Implementations like LinkedList and PriorityQueue offer additional methods for enqueueing and dequeueing elements.

Deque: The Deque interface extends the Queue interface and represents a double-ended queue. It allows elements to be inserted and removed from both ends. It provides methods to support operations like insertion, removal, and retrieval from both ends of the queue. ArrayDeque and LinkedList are examples of Deque implementations.

Map: Although not extending the Collection interface, the Map interface is an essential part of the Collection framework. It represents a mapping between keys and values, where each key is unique. Map implementations, such as HashMap and TreeMap, allow efficient key-value retrieval, addition, and removal operations.

===============================================
Q5. Differentiate between List and Set in Java.
-----------------------------------------------
In Java, List and Set are two distinct interfaces that serve different purposes within the Collection framework.

List: The List interface represents an ordered collection that allows duplicate elements. It maintains the insertion order of elements, meaning that the order in which elements are added is preserved. List implementations, such as ArrayList and LinkedList, provide methods for positional access, searching, and manipulation of elements. The List interface allows elements to be inserted or removed at specific indices. It provides an ordered and index-based structure, making it suitable for scenarios where elements need to be stored in a specific order and duplicate elements are allowed.

Set: The Set interface represents an unordered collection that does not allow duplicate elements. Unlike List, Set does not maintain any specific order of elements. Set implementations, such as HashSet and TreeSet, provide methods for checking membership, adding, and removing elements. Set ensures that each element in the collection is unique, disregarding the order in which elements are added. Set is useful when uniqueness of elements is required, and the order of elements is not important.

======================================================================
Q6. What is the difference between Iterator and ListIterator in Java?
----------------------------------------------------------------------
Iterator and ListIterator are both interfaces that allow you to iterate over a collection. However, there are some key differences between the two interfaces.

Iterator can only iterate over a collection in a forward direction, while ListIterator can iterate over a list in both forward and backward directions.
ListIterator also provides additional methods that allow you to modify the collection as you are iterating over it.
In other words, Iterator is a simpler interface that is only used to iterate over a collection, while ListIterator is a more powerful interface that can be used to iterate over a list and modify the list as you are iterating over it.

=====================================================================
Q7. What is the difference between Comparable and Comparator in Java?
---------------------------------------------------------------------
Comparable and Comparator are both interfaces that can be used to compare objects. However, there are some key differences between the two interfaces.

Comparable is an interface that is implemented by the objects that you want to compare. The compareTo() method of the Comparable interface compares two objects and returns an integer value.
Comparator is an interface that is used to compare objects that do not implement the Comparable interface. The compare() method of the Comparator interface compares two objects and returns an integer value.
In other words, Comparable is used to compare objects of the same type, while Comparator is used to compare objects of any type.

=================================
Q8. What is collision in HashMap?
---------------------------------
In a HashMap, a collision occurs when two or more keys hash to the same bucket. This can happen because the hash function is not perfect and there is a chance that two different keys will have the same hash value.

When a collision occurs, the HashMap will use a linked list to store the keys that hash to the same bucket. This allows the HashMap to access all of the keys in the bucket even if they have the same hash value.

In other words, a collision in HashMap is when two or more keys have the same hash code. This can cause problems when trying to access the keys, as the HashMap will not be able to distinguish between them.

===============================================
Q9. Distinguish between a hashmap and a Treemap.
-----------------------------------------------
A HashMap and a Treemap are both data structures that store key-value pairs. However, they differ in how they store the key-value pairs and how they order the keys.

HashMap stores the key-value pairs in an unordered fashion. This means that the keys are not sorted in any particular order.
Treemap stores the key-value pairs in a sorted fashion. This means that the keys are sorted in ascending order by their natural ordering or by a comparator.
In other words, a HashMap stores the keys and values in an unordered map, while a Treemap stores the keys and values in a sorted map.

==================================
Q10. Define LinkedHashMap in Java
----------------------------------
A LinkedHashMap is a subclass of HashMap that maintains a linked list of the entries in the map. This allows the entries in the map to be iterated over in the order in which they were inserted.

The linked list is not used for storing the keys and values of the map. It is only used to maintain the order of the entries in the map.

In other words, a LinkedHashMap is a HashMap that maintains a linked list of the entries in the map. This allows the entries in the map to be iterated over in the order in which they were inserted.

