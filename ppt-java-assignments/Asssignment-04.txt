======================================================
Q1. Write a program to show Interface Example in java?
------------------------------------------------------
public interface Animal {

    public void makeSound();

    public void move();
}

public class Dog implements Animal {

    @Override
    public void makeSound() {
        System.out.println("Woof");
    }

    @Override
    public void move() {
        System.out.println("I am walking");
    }
}

public class Cat implements Animal {

    @Override
    public void makeSound() {
        System.out.println("Meow");
    }

    @Override
    public void move() {
        System.out.println("I am jumping");
    }
}

public class InterfaceExample {

    public static void main(String[] args) {
        Animal dog = new Dog();
        dog.makeSound();
        dog.move();

        Animal cat = new Cat();
        cat.makeSound();
        cat.move();
    }
}

====================================================================================
Q2.Write a program a Program with 2 concrete method and 2 abstract method in java ?
------------------------------------------------------------------------------------
public abstract class Shape {

    public void draw() {
        // Concrete method
    }

    public abstract void getArea();

    public abstract void getPerimeter();
}

public class Circle extends Shape {

    @Override
    public void getArea() {
        // Abstract method implementation
    }

    @Override
    public void getPerimeter() {
        // Abstract method implementation
    }
}

public class Square extends Shape {

    @Override
    public void getArea() {
        // Abstract method implementation
    }

    @Override
    public void getPerimeter() {
        // Abstract method implementation
    }
}

====================================================================
Q3.Write a program to show the use of functional interface in java?
--------------------------------------------------------------------
@FunctionalInterface
public interface Calculator {

    int calculate(int x, int y);
}

public class FunctionalInterfaceExample {

    public static void main(String[] args) {
        Calculator add = (x, y) -> x + y;
        Calculator subtract = (x, y) -> x - y;
        Calculator multiply = (x, y) -> x * y;
        Calculator divide = (x, y) -> x / y;

        System.out.println(add.calculate(10, 20)); // 30
        System.out.println(subtract.calculate(10, 20)); // -10
        System.out.println(multiply.calculate(10, 20)); // 200
        System.out.println(divide.calculate(10, 20)); // 0.5
    }
}

=================================
Q4.What is an interface in Java?
---------------------------------

An interface in Java is a reference type that is used to define a contract that classes must implement. An interface can contain abstract methods, concrete methods, and constant variables.

Abstract methods: Abstract methods are methods that do not have a body. They are declared with the abstract keyword. Classes that implement an interface must provide an implementation for all of the abstract methods in the interface.

Concrete methods: Concrete methods are methods that have a body. They are declared with the public and abstract keywords. Classes that implement an interface can choose to override the concrete methods in the interface, or they can simply inherit the implementation from the interface.

Constant variables: Constant variables are variables that are declared with the final and public keywords. They can be assigned a value only once, and the value cannot be changed. Classes that implement an interface can inherit the constant variables from the interface.

Interfaces and polymorphism: Interfaces can be used to achieve polymorphism in Java. Polymorphism means that objects of different classes can be treated as if they were objects of the same class. This is possible because interfaces define a contract that all classes that implement the interface must adhere to.

==========================================
Q5.What is the use of interface in Java?
-----------------------------------------
Interfaces are used in Java :

Defining a contract: Interfaces can be used to define a contract that classes must implement. This can be useful for ensuring that all classes that implement an interface have the same set of methods and behavior.
Polymorphism: Interfaces can be used to achieve polymorphism in Java. This means that objects of different classes can be treated as if they were objects of the same class.
Loose coupling: Interfaces can be used to achieve loose coupling in Java. This means that the classes that implement an interface are not tightly coupled to each other. This can make code more flexible and easier to maintain.

Benefits of using interfaces in Java:
Interfaces promote abstraction: Interfaces promote abstraction by hiding the implementation details of a class. This can make code easier to understand and maintain.
Interfaces promote reusability: Interfaces promote reusability by allowing you to reuse code in different contexts. This is because the implementation details of an interface are hidden, so the interface can be used without knowing how it is implemented.
Interfaces promote flexibility: Interfaces promote flexibility by allowing you to change the implementation of an interface without affecting the classes that implement the interface. This can make code more adaptable to change.

=============================================
Q6. What is the lambda expression of Java 8?
---------------------------------------------
In Java 8, lambda expressions provide a concise way to represent anonymous functions. They are characterized by a parameter list, an arrow operator (->), and a body expression. Lambda expressions allow the implementation of functional interfaces, which are interfaces with a single abstract method (SAM). The syntax for a lambda expression is (parameters) -> expression or (parameters) -> { statements; }. For example, (x, y) -> x + y represents a lambda expression that takes two parameters and returns their sum. Lambda expressions enable more expressive and compact code, promoting a functional programming style in Java.

======================================================
Q7. Can you pass lambda expressions to a method? When?
-------------------------------------------------------
Yes, lambda expressions can be passed as arguments to methods. This is possible when the method parameter type is a functional interface. Functional interfaces have only one abstract method, making them suitable for lambda expressions. Here's an example:

interface MyInterface {
    void myMethod();
}

class MyClass {
    static void performAction(MyInterface action) {
        action.myMethod();
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass.performAction(() -> System.out.println("Performing action"));
    }
}

===============================================
Q8. What is the functional interface in Java 8?
-----------------------------------------------
A functional interface in Java 8 is an interface that contains exactly one abstract method. It is annotated with @FunctionalInterface to indicate its functional nature explicitly. Functional interfaces serve as the foundation for lambda expressions and method references. They enable functional programming in Java by allowing behavior to be treated as a first-class citizen. Functional interfaces can be created by developers or obtained from existing APIs. Examples of functional interfaces in Java 8 include Runnable, Predicate, Consumer, and Function. These interfaces provide a single abstract method that represents a specific behavior, making them suitable for lambda expressions and method references.

=========================================================
Q9. What is the benefit of lambda expressions in Java 8?
----------------------------------------------------------
Lambda expressions in Java 8 offer several benefits. Firstly, they enable developers to write more concise and expressive code by reducing boilerplate code. Lambda expressions promote a functional programming style, allowing developers to focus on the behavior of code rather than the mechanics of implementation. This leads to more readable and maintainable code. Additionally, lambda expressions facilitate code reuse and modularization by allowing behavior to be passed as arguments to methods. They provide a powerful tool for writing higher-order functions and working with streams and collections in a more streamlined manner. Overall, lambda expressions enhance code flexibility, readability, and promote the principles of functional programming.

================================================================
Q10. Is it mandatory for a lambda expression to have parameters?
----------------------------------------------------------------
No, it is not mandatory for a lambda expression to have parameters. Lambda expressions can be parameterless, depending on the functional interface's method signature. If the functional interface's method does not require any input parameters, the lambda expression can be defined without parameters. For example, () -> System.out.println("Hello") represents a parameterless lambda expression. This allows for a more compact syntax when the behavior does not rely on specific input values. Lambda expressions without parameters are useful in scenarios where the behavior can be expressed independently of any external state or input parameters.