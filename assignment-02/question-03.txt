import java.util.Arrays;

public class LongestHarmoniousSubsequence {

  public static int findLongestHarmoniousSubsequence(int[] nums) {
    int maxValue = Arrays.stream(nums).max().getAsInt();
    int minValue = Arrays.stream(nums).min().getAsInt();
    if (maxValue - minValue != 1) {
      return 0;
    }

    int[] dp = new int[nums.length];
    Arrays.fill(dp, 1);
    for (int i = 1; i < nums.length; i++) {
      for (int j = 0; j < i; j++) {
        if (nums[i] == nums[j] + 1) {
          dp[i] = Math.max(dp[i], dp[j] + 1);
        }
      }
    }

    return Arrays.stream(dp).max().getAsInt();
  }

  public static void main(String[] args) {
    int[] nums = {1, 3, 2, 2, 5, 2, 3, 7};
    System.out.println(findLongestHarmoniousSubsequence(nums)); // 5
  }
}